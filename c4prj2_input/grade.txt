Grading at Fri May 10 15:45:04 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Line_1_did_not_match
Line_2_did_not_match
Your file did not match the expected ouput
Test case failed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Line_1_did_not_match
Line_2_did_not_match
Line_3_did_not_match
Line_4_did_not_match
Line_5_did_not_match
Line_6_did_not_match
Line_7_did_not_match
Line_8_did_not_match
Your file did not match the expected ouput
Test case failed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==186== Memcheck, a memory error detector
==186== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==186== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==186== Command: ./tester h.txt d.txt
==186== Parent PID: 185
==186== 
==186== Invalid write of size 8
==186==    at 0x401347: add_future_card (in /graderhome/work/c4prj2_input/tester)
==186==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==186==    by 0x400F3B: read_input (in /graderhome/work/c4prj2_input/tester)
==186==    by 0x402488: main (test-input.c:69)
==186==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==186== 
==186== 
==186== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==186==  Access not within mapped region at address 0x0
==186==    at 0x401347: add_future_card (in /graderhome/work/c4prj2_input/tester)
==186==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==186==    by 0x400F3B: read_input (in /graderhome/work/c4prj2_input/tester)
==186==    by 0x402488: main (test-input.c:69)
==186==  If you believe this happened as a result of a stack
==186==  overflow in your program's main thread (unlikely but
==186==  possible), you can try to increase the size of the
==186==  main thread stack using the --main-stacksize= flag.
==186==  The main thread stack size used in this run was 8388608.
==186== 
==186== HEAP SUMMARY:
==186==     in use at exit: 848 bytes in 16 blocks
==186==   total heap usage: 24 allocs, 8 frees, 9,208 bytes allocated
==186== 
==186== LEAK SUMMARY:
==186==    definitely lost: 16 bytes in 2 blocks
==186==    indirectly lost: 0 bytes in 0 blocks
==186==      possibly lost: 0 bytes in 0 blocks
==186==    still reachable: 832 bytes in 14 blocks
==186==         suppressed: 0 bytes in 0 blocks
==186== Rerun with --leak-check=full to see details of leaked memory
==186== 
==186== For counts of detected and suppressed errors, rerun with: -v
==186== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==192== Memcheck, a memory error detector
==192== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==192== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==192== Command: ./tester i1 i2
==192== Parent PID: 191
==192== 
==192== Invalid write of size 8
==192==    at 0x401347: add_future_card (in /graderhome/work/c4prj2_input/tester)
==192==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==192==    by 0x400F3B: read_input (in /graderhome/work/c4prj2_input/tester)
==192==    by 0x402488: main (test-input.c:69)
==192==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==192== 
==192== 
==192== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==192==  Access not within mapped region at address 0x0
==192==    at 0x401347: add_future_card (in /graderhome/work/c4prj2_input/tester)
==192==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==192==    by 0x400F3B: read_input (in /graderhome/work/c4prj2_input/tester)
==192==    by 0x402488: main (test-input.c:69)
==192==  If you believe this happened as a result of a stack
==192==  overflow in your program's main thread (unlikely but
==192==  possible), you can try to increase the size of the
==192==  main thread stack using the --main-stacksize= flag.
==192==  The main thread stack size used in this run was 8388608.
==192== 
==192== HEAP SUMMARY:
==192==     in use at exit: 800 bytes in 13 blocks
==192==   total heap usage: 18 allocs, 5 frees, 9,040 bytes allocated
==192== 
==192== LEAK SUMMARY:
==192==    definitely lost: 16 bytes in 2 blocks
==192==    indirectly lost: 0 bytes in 0 blocks
==192==      possibly lost: 0 bytes in 0 blocks
==192==    still reachable: 784 bytes in 11 blocks
==192==         suppressed: 0 bytes in 0 blocks
==192== Rerun with --leak-check=full to see details of leaked memory
==192== 
==192== For counts of detected and suppressed errors, rerun with: -v
==192== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
