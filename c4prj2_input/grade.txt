Grading at Sun May 12 04:34:40 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==948== Memcheck, a memory error detector
==948== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==948== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==948== Command: ./tester h.txt d.txt
==948== Parent PID: 947
==948== 
==948== Invalid write of size 8
==948==    at 0x40143B: add_future_card (in /graderhome/work/c4prj2_input/tester)
==948==    by 0x400D97: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==948==    by 0x400FE4: read_input (in /graderhome/work/c4prj2_input/tester)
==948==    by 0x4025BA: main (test-input.c:69)
==948==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==948== 
==948== 
==948== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==948==  Access not within mapped region at address 0x0
==948==    at 0x40143B: add_future_card (in /graderhome/work/c4prj2_input/tester)
==948==    by 0x400D97: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==948==    by 0x400FE4: read_input (in /graderhome/work/c4prj2_input/tester)
==948==    by 0x4025BA: main (test-input.c:69)
==948==  If you believe this happened as a result of a stack
==948==  overflow in your program's main thread (unlikely but
==948==  possible), you can try to increase the size of the
==948==  main thread stack using the --main-stacksize= flag.
==948==  The main thread stack size used in this run was 8388608.
==948== 
==948== HEAP SUMMARY:
==948==     in use at exit: 848 bytes in 16 blocks
==948==   total heap usage: 23 allocs, 7 frees, 5,112 bytes allocated
==948== 
==948== LEAK SUMMARY:
==948==    definitely lost: 16 bytes in 2 blocks
==948==    indirectly lost: 0 bytes in 0 blocks
==948==      possibly lost: 0 bytes in 0 blocks
==948==    still reachable: 832 bytes in 14 blocks
==948==         suppressed: 0 bytes in 0 blocks
==948== Rerun with --leak-check=full to see details of leaked memory
==948== 
==948== For counts of detected and suppressed errors, rerun with: -v
==948== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==954== Memcheck, a memory error detector
==954== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==954== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==954== Command: ./tester i1 i2
==954== Parent PID: 953
==954== 
==954== Invalid write of size 8
==954==    at 0x40143B: add_future_card (in /graderhome/work/c4prj2_input/tester)
==954==    by 0x400D97: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==954==    by 0x400FE4: read_input (in /graderhome/work/c4prj2_input/tester)
==954==    by 0x4025BA: main (test-input.c:69)
==954==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==954== 
==954== 
==954== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==954==  Access not within mapped region at address 0x0
==954==    at 0x40143B: add_future_card (in /graderhome/work/c4prj2_input/tester)
==954==    by 0x400D97: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==954==    by 0x400FE4: read_input (in /graderhome/work/c4prj2_input/tester)
==954==    by 0x4025BA: main (test-input.c:69)
==954==  If you believe this happened as a result of a stack
==954==  overflow in your program's main thread (unlikely but
==954==  possible), you can try to increase the size of the
==954==  main thread stack using the --main-stacksize= flag.
==954==  The main thread stack size used in this run was 8388608.
==954== 
==954== HEAP SUMMARY:
==954==     in use at exit: 800 bytes in 13 blocks
==954==   total heap usage: 17 allocs, 4 frees, 4,944 bytes allocated
==954== 
==954== LEAK SUMMARY:
==954==    definitely lost: 16 bytes in 2 blocks
==954==    indirectly lost: 0 bytes in 0 blocks
==954==      possibly lost: 0 bytes in 0 blocks
==954==    still reachable: 784 bytes in 11 blocks
==954==         suppressed: 0 bytes in 0 blocks
==954== Rerun with --leak-check=full to see details of leaked memory
==954== 
==954== For counts of detected and suppressed errors, rerun with: -v
==954== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
