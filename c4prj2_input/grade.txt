Grading at Fri May 10 15:47:47 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==389== Memcheck, a memory error detector
==389== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==389== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==389== Command: ./tester h.txt d.txt
==389== Parent PID: 388
==389== 
==389== Invalid write of size 8
==389==    at 0x401338: add_future_card (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x400F2C: read_input (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x402479: main (test-input.c:69)
==389==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==389== 
==389== 
==389== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==389==  Access not within mapped region at address 0x0
==389==    at 0x401338: add_future_card (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x400F2C: read_input (in /graderhome/work/c4prj2_input/tester)
==389==    by 0x402479: main (test-input.c:69)
==389==  If you believe this happened as a result of a stack
==389==  overflow in your program's main thread (unlikely but
==389==  possible), you can try to increase the size of the
==389==  main thread stack using the --main-stacksize= flag.
==389==  The main thread stack size used in this run was 8388608.
==389== 
==389== HEAP SUMMARY:
==389==     in use at exit: 848 bytes in 16 blocks
==389==   total heap usage: 23 allocs, 7 frees, 5,112 bytes allocated
==389== 
==389== LEAK SUMMARY:
==389==    definitely lost: 16 bytes in 2 blocks
==389==    indirectly lost: 0 bytes in 0 blocks
==389==      possibly lost: 0 bytes in 0 blocks
==389==    still reachable: 832 bytes in 14 blocks
==389==         suppressed: 0 bytes in 0 blocks
==389== Rerun with --leak-check=full to see details of leaked memory
==389== 
==389== For counts of detected and suppressed errors, rerun with: -v
==389== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==395== Memcheck, a memory error detector
==395== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==395== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==395== Command: ./tester i1 i2
==395== Parent PID: 394
==395== 
==395== Invalid write of size 8
==395==    at 0x401338: add_future_card (in /graderhome/work/c4prj2_input/tester)
==395==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==395==    by 0x400F2C: read_input (in /graderhome/work/c4prj2_input/tester)
==395==    by 0x402479: main (test-input.c:69)
==395==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==395== 
==395== 
==395== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==395==  Access not within mapped region at address 0x0
==395==    at 0x401338: add_future_card (in /graderhome/work/c4prj2_input/tester)
==395==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==395==    by 0x400F2C: read_input (in /graderhome/work/c4prj2_input/tester)
==395==    by 0x402479: main (test-input.c:69)
==395==  If you believe this happened as a result of a stack
==395==  overflow in your program's main thread (unlikely but
==395==  possible), you can try to increase the size of the
==395==  main thread stack using the --main-stacksize= flag.
==395==  The main thread stack size used in this run was 8388608.
==395== 
==395== HEAP SUMMARY:
==395==     in use at exit: 800 bytes in 13 blocks
==395==   total heap usage: 17 allocs, 4 frees, 4,944 bytes allocated
==395== 
==395== LEAK SUMMARY:
==395==    definitely lost: 16 bytes in 2 blocks
==395==    indirectly lost: 0 bytes in 0 blocks
==395==      possibly lost: 0 bytes in 0 blocks
==395==    still reachable: 784 bytes in 11 blocks
==395==         suppressed: 0 bytes in 0 blocks
==395== Rerun with --leak-check=full to see details of leaked memory
==395== 
==395== For counts of detected and suppressed errors, rerun with: -v
==395== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
