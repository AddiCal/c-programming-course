Grading at Thu May 16 21:54:34 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==200== Memcheck, a memory error detector
==200== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==200== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==200== Command: ./tester h.txt d.txt
==200== Parent PID: 199
==200== 
==200== Invalid write of size 8
==200==    at 0x401484: add_future_card (in /graderhome/work/c4prj2_input/tester)
==200==    by 0x400DA6: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==200==    by 0x401061: read_input (in /graderhome/work/c4prj2_input/tester)
==200==    by 0x4025B6: main (test-input.c:69)
==200==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==200== 
==200== 
==200== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==200==  Access not within mapped region at address 0x0
==200==    at 0x401484: add_future_card (in /graderhome/work/c4prj2_input/tester)
==200==    by 0x400DA6: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==200==    by 0x401061: read_input (in /graderhome/work/c4prj2_input/tester)
==200==    by 0x4025B6: main (test-input.c:69)
==200==  If you believe this happened as a result of a stack
==200==  overflow in your program's main thread (unlikely but
==200==  possible), you can try to increase the size of the
==200==  main thread stack using the --main-stacksize= flag.
==200==  The main thread stack size used in this run was 8388608.
==200== 
==200== HEAP SUMMARY:
==200==     in use at exit: 904 bytes in 18 blocks
==200==   total heap usage: 30 allocs, 12 frees, 5,288 bytes allocated
==200== 
==200== LEAK SUMMARY:
==200==    definitely lost: 16 bytes in 2 blocks
==200==    indirectly lost: 0 bytes in 0 blocks
==200==      possibly lost: 0 bytes in 0 blocks
==200==    still reachable: 888 bytes in 16 blocks
==200==         suppressed: 0 bytes in 0 blocks
==200== Rerun with --leak-check=full to see details of leaked memory
==200== 
==200== For counts of detected and suppressed errors, rerun with: -v
==200== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==206== Memcheck, a memory error detector
==206== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==206== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==206== Command: ./tester i1 i2
==206== Parent PID: 205
==206== 
==206== Invalid write of size 8
==206==    at 0x401484: add_future_card (in /graderhome/work/c4prj2_input/tester)
==206==    by 0x400DA6: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==206==    by 0x401061: read_input (in /graderhome/work/c4prj2_input/tester)
==206==    by 0x4025B6: main (test-input.c:69)
==206==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==206== 
==206== 
==206== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==206==  Access not within mapped region at address 0x0
==206==    at 0x401484: add_future_card (in /graderhome/work/c4prj2_input/tester)
==206==    by 0x400DA6: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==206==    by 0x401061: read_input (in /graderhome/work/c4prj2_input/tester)
==206==    by 0x4025B6: main (test-input.c:69)
==206==  If you believe this happened as a result of a stack
==206==  overflow in your program's main thread (unlikely but
==206==  possible), you can try to increase the size of the
==206==  main thread stack using the --main-stacksize= flag.
==206==  The main thread stack size used in this run was 8388608.
==206== 
==206== HEAP SUMMARY:
==206==     in use at exit: 832 bytes in 15 blocks
==206==   total heap usage: 21 allocs, 6 frees, 5,000 bytes allocated
==206== 
==206== LEAK SUMMARY:
==206==    definitely lost: 16 bytes in 2 blocks
==206==    indirectly lost: 0 bytes in 0 blocks
==206==      possibly lost: 0 bytes in 0 blocks
==206==    still reachable: 816 bytes in 13 blocks
==206==         suppressed: 0 bytes in 0 blocks
==206== Rerun with --leak-check=full to see details of leaked memory
==206== 
==206== For counts of detected and suppressed errors, rerun with: -v
==206== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
