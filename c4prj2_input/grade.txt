Grading at Fri May 17 04:25:42 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==870== Memcheck, a memory error detector
==870== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==870== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==870== Command: ./tester h.txt d.txt
==870== Parent PID: 869
==870== 
==870== Invalid write of size 8
==870==    at 0x401560: add_future_card (in /graderhome/work/c4prj2_input/tester)
==870==    by 0x400DA6: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==870==    by 0x401061: read_input (in /graderhome/work/c4prj2_input/tester)
==870==    by 0x4025D8: main (test-input.c:69)
==870==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==870== 
==870== 
==870== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==870==  Access not within mapped region at address 0x0
==870==    at 0x401560: add_future_card (in /graderhome/work/c4prj2_input/tester)
==870==    by 0x400DA6: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==870==    by 0x401061: read_input (in /graderhome/work/c4prj2_input/tester)
==870==    by 0x4025D8: main (test-input.c:69)
==870==  If you believe this happened as a result of a stack
==870==  overflow in your program's main thread (unlikely but
==870==  possible), you can try to increase the size of the
==870==  main thread stack using the --main-stacksize= flag.
==870==  The main thread stack size used in this run was 8388608.
==870== 
==870== HEAP SUMMARY:
==870==     in use at exit: 904 bytes in 18 blocks
==870==   total heap usage: 30 allocs, 12 frees, 5,288 bytes allocated
==870== 
==870== LEAK SUMMARY:
==870==    definitely lost: 8 bytes in 1 blocks
==870==    indirectly lost: 0 bytes in 0 blocks
==870==      possibly lost: 0 bytes in 0 blocks
==870==    still reachable: 896 bytes in 17 blocks
==870==         suppressed: 0 bytes in 0 blocks
==870== Rerun with --leak-check=full to see details of leaked memory
==870== 
==870== For counts of detected and suppressed errors, rerun with: -v
==870== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==876== Memcheck, a memory error detector
==876== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==876== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==876== Command: ./tester i1 i2
==876== Parent PID: 875
==876== 
==876== Invalid write of size 8
==876==    at 0x401560: add_future_card (in /graderhome/work/c4prj2_input/tester)
==876==    by 0x400DA6: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==876==    by 0x401061: read_input (in /graderhome/work/c4prj2_input/tester)
==876==    by 0x4025D8: main (test-input.c:69)
==876==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==876== 
==876== 
==876== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==876==  Access not within mapped region at address 0x0
==876==    at 0x401560: add_future_card (in /graderhome/work/c4prj2_input/tester)
==876==    by 0x400DA6: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==876==    by 0x401061: read_input (in /graderhome/work/c4prj2_input/tester)
==876==    by 0x4025D8: main (test-input.c:69)
==876==  If you believe this happened as a result of a stack
==876==  overflow in your program's main thread (unlikely but
==876==  possible), you can try to increase the size of the
==876==  main thread stack using the --main-stacksize= flag.
==876==  The main thread stack size used in this run was 8388608.
==876== 
==876== HEAP SUMMARY:
==876==     in use at exit: 832 bytes in 15 blocks
==876==   total heap usage: 21 allocs, 6 frees, 5,000 bytes allocated
==876== 
==876== LEAK SUMMARY:
==876==    definitely lost: 8 bytes in 1 blocks
==876==    indirectly lost: 0 bytes in 0 blocks
==876==      possibly lost: 0 bytes in 0 blocks
==876==    still reachable: 824 bytes in 14 blocks
==876==         suppressed: 0 bytes in 0 blocks
==876== Rerun with --leak-check=full to see details of leaked memory
==876== 
==876== For counts of detected and suppressed errors, rerun with: -v
==876== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
