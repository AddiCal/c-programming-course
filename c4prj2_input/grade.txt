Grading at Sat May  4 02:20:23 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==881== Memcheck, a memory error detector
==881== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==881== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==881== Command: ./tester h.txt d.txt
==881== Parent PID: 880
==881== 
==881== Invalid read of size 8
==881==    at 0x400FE4: add_future_card (in /graderhome/work/c4prj2_input/tester)
==881==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==881==    by 0x400F2C: read_input (in /graderhome/work/c4prj2_input/tester)
==881==    by 0x402258: main (test-input.c:69)
==881==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==881== 
==881== 
==881== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==881==  Access not within mapped region at address 0x8
==881==    at 0x400FE4: add_future_card (in /graderhome/work/c4prj2_input/tester)
==881==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==881==    by 0x400F2C: read_input (in /graderhome/work/c4prj2_input/tester)
==881==    by 0x402258: main (test-input.c:69)
==881==  If you believe this happened as a result of a stack
==881==  overflow in your program's main thread (unlikely but
==881==  possible), you can try to increase the size of the
==881==  main thread stack using the --main-stacksize= flag.
==881==  The main thread stack size used in this run was 8388608.
==881== 
==881== HEAP SUMMARY:
==881==     in use at exit: 808 bytes in 12 blocks
==881==   total heap usage: 19 allocs, 7 frees, 5,072 bytes allocated
==881== 
==881== LEAK SUMMARY:
==881==    definitely lost: 0 bytes in 0 blocks
==881==    indirectly lost: 0 bytes in 0 blocks
==881==      possibly lost: 0 bytes in 0 blocks
==881==    still reachable: 808 bytes in 12 blocks
==881==         suppressed: 0 bytes in 0 blocks
==881== Rerun with --leak-check=full to see details of leaked memory
==881== 
==881== For counts of detected and suppressed errors, rerun with: -v
==881== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==887== Memcheck, a memory error detector
==887== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==887== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==887== Command: ./tester i1 i2
==887== Parent PID: 886
==887== 
==887== Invalid read of size 8
==887==    at 0x400FE4: add_future_card (in /graderhome/work/c4prj2_input/tester)
==887==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==887==    by 0x400F2C: read_input (in /graderhome/work/c4prj2_input/tester)
==887==    by 0x402258: main (test-input.c:69)
==887==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==887== 
==887== 
==887== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==887==  Access not within mapped region at address 0x8
==887==    at 0x400FE4: add_future_card (in /graderhome/work/c4prj2_input/tester)
==887==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==887==    by 0x400F2C: read_input (in /graderhome/work/c4prj2_input/tester)
==887==    by 0x402258: main (test-input.c:69)
==887==  If you believe this happened as a result of a stack
==887==  overflow in your program's main thread (unlikely but
==887==  possible), you can try to increase the size of the
==887==  main thread stack using the --main-stacksize= flag.
==887==  The main thread stack size used in this run was 8388608.
==887== 
==887== HEAP SUMMARY:
==887==     in use at exit: 760 bytes in 9 blocks
==887==   total heap usage: 13 allocs, 4 frees, 4,904 bytes allocated
==887== 
==887== LEAK SUMMARY:
==887==    definitely lost: 0 bytes in 0 blocks
==887==    indirectly lost: 0 bytes in 0 blocks
==887==      possibly lost: 0 bytes in 0 blocks
==887==    still reachable: 760 bytes in 9 blocks
==887==         suppressed: 0 bytes in 0 blocks
==887== Rerun with --leak-check=full to see details of leaked memory
==887== 
==887== For counts of detected and suppressed errors, rerun with: -v
==887== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
