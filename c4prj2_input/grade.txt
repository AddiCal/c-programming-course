Grading at Sat May 11 02:31:04 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==291== Memcheck, a memory error detector
==291== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==291== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==291== Command: ./tester h.txt d.txt
==291== Parent PID: 290
==291== 
==291== Invalid write of size 8
==291==    at 0x4013A2: add_future_card (in /graderhome/work/c4prj2_input/tester)
==291==    by 0x400DB3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==291==    by 0x400F96: read_input (in /graderhome/work/c4prj2_input/tester)
==291==    by 0x4024E3: main (test-input.c:69)
==291==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==291== 
==291== 
==291== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==291==  Access not within mapped region at address 0x0
==291==    at 0x4013A2: add_future_card (in /graderhome/work/c4prj2_input/tester)
==291==    by 0x400DB3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==291==    by 0x400F96: read_input (in /graderhome/work/c4prj2_input/tester)
==291==    by 0x4024E3: main (test-input.c:69)
==291==  If you believe this happened as a result of a stack
==291==  overflow in your program's main thread (unlikely but
==291==  possible), you can try to increase the size of the
==291==  main thread stack using the --main-stacksize= flag.
==291==  The main thread stack size used in this run was 8388608.
==291== 
==291== HEAP SUMMARY:
==291==     in use at exit: 848 bytes in 16 blocks
==291==   total heap usage: 23 allocs, 7 frees, 5,112 bytes allocated
==291== 
==291== LEAK SUMMARY:
==291==    definitely lost: 16 bytes in 2 blocks
==291==    indirectly lost: 0 bytes in 0 blocks
==291==      possibly lost: 0 bytes in 0 blocks
==291==    still reachable: 832 bytes in 14 blocks
==291==         suppressed: 0 bytes in 0 blocks
==291== Rerun with --leak-check=full to see details of leaked memory
==291== 
==291== For counts of detected and suppressed errors, rerun with: -v
==291== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==297== Memcheck, a memory error detector
==297== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==297== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==297== Command: ./tester i1 i2
==297== Parent PID: 296
==297== 
==297== Invalid write of size 8
==297==    at 0x4013A2: add_future_card (in /graderhome/work/c4prj2_input/tester)
==297==    by 0x400DB3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==297==    by 0x400F96: read_input (in /graderhome/work/c4prj2_input/tester)
==297==    by 0x4024E3: main (test-input.c:69)
==297==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==297== 
==297== 
==297== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==297==  Access not within mapped region at address 0x0
==297==    at 0x4013A2: add_future_card (in /graderhome/work/c4prj2_input/tester)
==297==    by 0x400DB3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==297==    by 0x400F96: read_input (in /graderhome/work/c4prj2_input/tester)
==297==    by 0x4024E3: main (test-input.c:69)
==297==  If you believe this happened as a result of a stack
==297==  overflow in your program's main thread (unlikely but
==297==  possible), you can try to increase the size of the
==297==  main thread stack using the --main-stacksize= flag.
==297==  The main thread stack size used in this run was 8388608.
==297== 
==297== HEAP SUMMARY:
==297==     in use at exit: 800 bytes in 13 blocks
==297==   total heap usage: 17 allocs, 4 frees, 4,944 bytes allocated
==297== 
==297== LEAK SUMMARY:
==297==    definitely lost: 16 bytes in 2 blocks
==297==    indirectly lost: 0 bytes in 0 blocks
==297==      possibly lost: 0 bytes in 0 blocks
==297==    still reachable: 784 bytes in 11 blocks
==297==         suppressed: 0 bytes in 0 blocks
==297== Rerun with --leak-check=full to see details of leaked memory
==297== 
==297== For counts of detected and suppressed errors, rerun with: -v
==297== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
