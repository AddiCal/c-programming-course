Grading at Thu May 16 01:09:43 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==224== Memcheck, a memory error detector
==224== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==224== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==224== Command: ./tester h.txt d.txt
==224== Parent PID: 223
==224== 
==224== Invalid write of size 8
==224==    at 0x401407: add_future_card (in /graderhome/work/c4prj2_input/tester)
==224==    by 0x400D97: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==224==    by 0x400FE4: read_input (in /graderhome/work/c4prj2_input/tester)
==224==    by 0x402539: main (test-input.c:69)
==224==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==224== 
==224== 
==224== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==224==  Access not within mapped region at address 0x0
==224==    at 0x401407: add_future_card (in /graderhome/work/c4prj2_input/tester)
==224==    by 0x400D97: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==224==    by 0x400FE4: read_input (in /graderhome/work/c4prj2_input/tester)
==224==    by 0x402539: main (test-input.c:69)
==224==  If you believe this happened as a result of a stack
==224==  overflow in your program's main thread (unlikely but
==224==  possible), you can try to increase the size of the
==224==  main thread stack using the --main-stacksize= flag.
==224==  The main thread stack size used in this run was 8388608.
==224== 
==224== HEAP SUMMARY:
==224==     in use at exit: 848 bytes in 16 blocks
==224==   total heap usage: 23 allocs, 7 frees, 5,112 bytes allocated
==224== 
==224== LEAK SUMMARY:
==224==    definitely lost: 16 bytes in 2 blocks
==224==    indirectly lost: 0 bytes in 0 blocks
==224==      possibly lost: 0 bytes in 0 blocks
==224==    still reachable: 832 bytes in 14 blocks
==224==         suppressed: 0 bytes in 0 blocks
==224== Rerun with --leak-check=full to see details of leaked memory
==224== 
==224== For counts of detected and suppressed errors, rerun with: -v
==224== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==230== Memcheck, a memory error detector
==230== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==230== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==230== Command: ./tester i1 i2
==230== Parent PID: 229
==230== 
==230== Invalid write of size 8
==230==    at 0x401407: add_future_card (in /graderhome/work/c4prj2_input/tester)
==230==    by 0x400D97: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==230==    by 0x400FE4: read_input (in /graderhome/work/c4prj2_input/tester)
==230==    by 0x402539: main (test-input.c:69)
==230==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==230== 
==230== 
==230== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==230==  Access not within mapped region at address 0x0
==230==    at 0x401407: add_future_card (in /graderhome/work/c4prj2_input/tester)
==230==    by 0x400D97: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==230==    by 0x400FE4: read_input (in /graderhome/work/c4prj2_input/tester)
==230==    by 0x402539: main (test-input.c:69)
==230==  If you believe this happened as a result of a stack
==230==  overflow in your program's main thread (unlikely but
==230==  possible), you can try to increase the size of the
==230==  main thread stack using the --main-stacksize= flag.
==230==  The main thread stack size used in this run was 8388608.
==230== 
==230== HEAP SUMMARY:
==230==     in use at exit: 800 bytes in 13 blocks
==230==   total heap usage: 17 allocs, 4 frees, 4,944 bytes allocated
==230== 
==230== LEAK SUMMARY:
==230==    definitely lost: 16 bytes in 2 blocks
==230==    indirectly lost: 0 bytes in 0 blocks
==230==      possibly lost: 0 bytes in 0 blocks
==230==    still reachable: 784 bytes in 11 blocks
==230==         suppressed: 0 bytes in 0 blocks
==230== Rerun with --leak-check=full to see details of leaked memory
==230== 
==230== For counts of detected and suppressed errors, rerun with: -v
==230== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
