Grading at Mon May 13 19:48:28 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==202== Memcheck, a memory error detector
==202== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==202== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==202== Command: ./tester h.txt d.txt
==202== Parent PID: 201
==202== 
==202== Invalid write of size 8
==202==    at 0x401407: add_future_card (in /graderhome/work/c4prj2_input/tester)
==202==    by 0x400D97: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==202==    by 0x400FE4: read_input (in /graderhome/work/c4prj2_input/tester)
==202==    by 0x40256C: main (test-input.c:69)
==202==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==202== 
==202== 
==202== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==202==  Access not within mapped region at address 0x0
==202==    at 0x401407: add_future_card (in /graderhome/work/c4prj2_input/tester)
==202==    by 0x400D97: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==202==    by 0x400FE4: read_input (in /graderhome/work/c4prj2_input/tester)
==202==    by 0x40256C: main (test-input.c:69)
==202==  If you believe this happened as a result of a stack
==202==  overflow in your program's main thread (unlikely but
==202==  possible), you can try to increase the size of the
==202==  main thread stack using the --main-stacksize= flag.
==202==  The main thread stack size used in this run was 8388608.
==202== 
==202== HEAP SUMMARY:
==202==     in use at exit: 848 bytes in 16 blocks
==202==   total heap usage: 23 allocs, 7 frees, 5,112 bytes allocated
==202== 
==202== LEAK SUMMARY:
==202==    definitely lost: 16 bytes in 2 blocks
==202==    indirectly lost: 0 bytes in 0 blocks
==202==      possibly lost: 0 bytes in 0 blocks
==202==    still reachable: 832 bytes in 14 blocks
==202==         suppressed: 0 bytes in 0 blocks
==202== Rerun with --leak-check=full to see details of leaked memory
==202== 
==202== For counts of detected and suppressed errors, rerun with: -v
==202== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==208== Memcheck, a memory error detector
==208== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==208== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==208== Command: ./tester i1 i2
==208== Parent PID: 207
==208== 
==208== Invalid write of size 8
==208==    at 0x401407: add_future_card (in /graderhome/work/c4prj2_input/tester)
==208==    by 0x400D97: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==208==    by 0x400FE4: read_input (in /graderhome/work/c4prj2_input/tester)
==208==    by 0x40256C: main (test-input.c:69)
==208==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==208== 
==208== 
==208== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==208==  Access not within mapped region at address 0x0
==208==    at 0x401407: add_future_card (in /graderhome/work/c4prj2_input/tester)
==208==    by 0x400D97: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==208==    by 0x400FE4: read_input (in /graderhome/work/c4prj2_input/tester)
==208==    by 0x40256C: main (test-input.c:69)
==208==  If you believe this happened as a result of a stack
==208==  overflow in your program's main thread (unlikely but
==208==  possible), you can try to increase the size of the
==208==  main thread stack using the --main-stacksize= flag.
==208==  The main thread stack size used in this run was 8388608.
==208== 
==208== HEAP SUMMARY:
==208==     in use at exit: 800 bytes in 13 blocks
==208==   total heap usage: 17 allocs, 4 frees, 4,944 bytes allocated
==208== 
==208== LEAK SUMMARY:
==208==    definitely lost: 16 bytes in 2 blocks
==208==    indirectly lost: 0 bytes in 0 blocks
==208==      possibly lost: 0 bytes in 0 blocks
==208==    still reachable: 784 bytes in 11 blocks
==208==         suppressed: 0 bytes in 0 blocks
==208== Rerun with --leak-check=full to see details of leaked memory
==208== 
==208== For counts of detected and suppressed errors, rerun with: -v
==208== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
