Grading at Tue May 14 16:52:20 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==172== Memcheck, a memory error detector
==172== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==172== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==172== Command: ./tester h.txt d.txt
==172== Parent PID: 171
==172== 
==172== Invalid write of size 8
==172==    at 0x4013FF: add_future_card (in /graderhome/work/c4prj2_input/tester)
==172==    by 0x400D97: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==172==    by 0x400FE4: read_input (in /graderhome/work/c4prj2_input/tester)
==172==    by 0x402564: main (test-input.c:69)
==172==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==172== 
==172== 
==172== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==172==  Access not within mapped region at address 0x0
==172==    at 0x4013FF: add_future_card (in /graderhome/work/c4prj2_input/tester)
==172==    by 0x400D97: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==172==    by 0x400FE4: read_input (in /graderhome/work/c4prj2_input/tester)
==172==    by 0x402564: main (test-input.c:69)
==172==  If you believe this happened as a result of a stack
==172==  overflow in your program's main thread (unlikely but
==172==  possible), you can try to increase the size of the
==172==  main thread stack using the --main-stacksize= flag.
==172==  The main thread stack size used in this run was 8388608.
==172== 
==172== HEAP SUMMARY:
==172==     in use at exit: 848 bytes in 16 blocks
==172==   total heap usage: 23 allocs, 7 frees, 5,112 bytes allocated
==172== 
==172== LEAK SUMMARY:
==172==    definitely lost: 16 bytes in 2 blocks
==172==    indirectly lost: 0 bytes in 0 blocks
==172==      possibly lost: 0 bytes in 0 blocks
==172==    still reachable: 832 bytes in 14 blocks
==172==         suppressed: 0 bytes in 0 blocks
==172== Rerun with --leak-check=full to see details of leaked memory
==172== 
==172== For counts of detected and suppressed errors, rerun with: -v
==172== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==178== Memcheck, a memory error detector
==178== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==178== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==178== Command: ./tester i1 i2
==178== Parent PID: 177
==178== 
==178== Invalid write of size 8
==178==    at 0x4013FF: add_future_card (in /graderhome/work/c4prj2_input/tester)
==178==    by 0x400D97: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==178==    by 0x400FE4: read_input (in /graderhome/work/c4prj2_input/tester)
==178==    by 0x402564: main (test-input.c:69)
==178==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==178== 
==178== 
==178== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==178==  Access not within mapped region at address 0x0
==178==    at 0x4013FF: add_future_card (in /graderhome/work/c4prj2_input/tester)
==178==    by 0x400D97: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==178==    by 0x400FE4: read_input (in /graderhome/work/c4prj2_input/tester)
==178==    by 0x402564: main (test-input.c:69)
==178==  If you believe this happened as a result of a stack
==178==  overflow in your program's main thread (unlikely but
==178==  possible), you can try to increase the size of the
==178==  main thread stack using the --main-stacksize= flag.
==178==  The main thread stack size used in this run was 8388608.
==178== 
==178== HEAP SUMMARY:
==178==     in use at exit: 800 bytes in 13 blocks
==178==   total heap usage: 17 allocs, 4 frees, 4,944 bytes allocated
==178== 
==178== LEAK SUMMARY:
==178==    definitely lost: 16 bytes in 2 blocks
==178==    indirectly lost: 0 bytes in 0 blocks
==178==      possibly lost: 0 bytes in 0 blocks
==178==    still reachable: 784 bytes in 11 blocks
==178==         suppressed: 0 bytes in 0 blocks
==178== Rerun with --leak-check=full to see details of leaked memory
==178== 
==178== For counts of detected and suppressed errors, rerun with: -v
==178== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
