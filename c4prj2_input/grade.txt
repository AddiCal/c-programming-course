Grading at Thu May  9 18:35:13 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Line_1_did_not_match
Line_2_did_not_match
Your file did not match the expected ouput
Test case failed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Line_1_did_not_match
Line_2_did_not_match
Line_3_did_not_match
Line_4_did_not_match
Line_5_did_not_match
Line_6_did_not_match
Line_7_did_not_match
Line_8_did_not_match
Your file did not match the expected ouput
Test case failed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==249== Memcheck, a memory error detector
==249== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==249== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==249== Command: ./tester h.txt d.txt
==249== Parent PID: 248
==249== 
==249== Invalid write of size 8
==249==    at 0x40115D: add_future_card (in /graderhome/work/c4prj2_input/tester)
==249==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==249==    by 0x400F3B: read_input (in /graderhome/work/c4prj2_input/tester)
==249==    by 0x40229E: main (test-input.c:69)
==249==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==249== 
==249== 
==249== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==249==  Access not within mapped region at address 0x0
==249==    at 0x40115D: add_future_card (in /graderhome/work/c4prj2_input/tester)
==249==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==249==    by 0x400F3B: read_input (in /graderhome/work/c4prj2_input/tester)
==249==    by 0x40229E: main (test-input.c:69)
==249==  If you believe this happened as a result of a stack
==249==  overflow in your program's main thread (unlikely but
==249==  possible), you can try to increase the size of the
==249==  main thread stack using the --main-stacksize= flag.
==249==  The main thread stack size used in this run was 8388608.
==249== 
==249== HEAP SUMMARY:
==249==     in use at exit: 848 bytes in 16 blocks
==249==   total heap usage: 24 allocs, 8 frees, 9,208 bytes allocated
==249== 
==249== LEAK SUMMARY:
==249==    definitely lost: 8 bytes in 1 blocks
==249==    indirectly lost: 0 bytes in 0 blocks
==249==      possibly lost: 0 bytes in 0 blocks
==249==    still reachable: 840 bytes in 15 blocks
==249==         suppressed: 0 bytes in 0 blocks
==249== Rerun with --leak-check=full to see details of leaked memory
==249== 
==249== For counts of detected and suppressed errors, rerun with: -v
==249== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==255== Memcheck, a memory error detector
==255== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==255== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==255== Command: ./tester i1 i2
==255== Parent PID: 254
==255== 
==255== Invalid write of size 8
==255==    at 0x40115D: add_future_card (in /graderhome/work/c4prj2_input/tester)
==255==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==255==    by 0x400F3B: read_input (in /graderhome/work/c4prj2_input/tester)
==255==    by 0x40229E: main (test-input.c:69)
==255==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==255== 
==255== 
==255== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==255==  Access not within mapped region at address 0x0
==255==    at 0x40115D: add_future_card (in /graderhome/work/c4prj2_input/tester)
==255==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==255==    by 0x400F3B: read_input (in /graderhome/work/c4prj2_input/tester)
==255==    by 0x40229E: main (test-input.c:69)
==255==  If you believe this happened as a result of a stack
==255==  overflow in your program's main thread (unlikely but
==255==  possible), you can try to increase the size of the
==255==  main thread stack using the --main-stacksize= flag.
==255==  The main thread stack size used in this run was 8388608.
==255== 
==255== HEAP SUMMARY:
==255==     in use at exit: 800 bytes in 13 blocks
==255==   total heap usage: 18 allocs, 5 frees, 9,040 bytes allocated
==255== 
==255== LEAK SUMMARY:
==255==    definitely lost: 8 bytes in 1 blocks
==255==    indirectly lost: 0 bytes in 0 blocks
==255==      possibly lost: 0 bytes in 0 blocks
==255==    still reachable: 792 bytes in 12 blocks
==255==         suppressed: 0 bytes in 0 blocks
==255== Rerun with --leak-check=full to see details of leaked memory
==255== 
==255== For counts of detected and suppressed errors, rerun with: -v
==255== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
