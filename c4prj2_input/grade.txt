Grading at Sun May  5 17:53:24 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Line_1_did_not_match
Line_2_did_not_match
Your file did not match the expected ouput
Test case failed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Line_1_did_not_match
Line_2_did_not_match
Line_3_did_not_match
Line_4_did_not_match
Line_5_did_not_match
Line_6_did_not_match
Line_7_did_not_match
Line_8_did_not_match
Your file did not match the expected ouput
Test case failed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==691== Memcheck, a memory error detector
==691== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==691== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==691== Command: ./tester h.txt d.txt
==691== Parent PID: 690
==691== 
==691== Invalid write of size 8
==691==    at 0x401282: add_future_card (in /graderhome/work/c4prj2_input/tester)
==691==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==691==    by 0x400F3B: read_input (in /graderhome/work/c4prj2_input/tester)
==691==    by 0x4022A5: main (test-input.c:69)
==691==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==691== 
==691== 
==691== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==691==  Access not within mapped region at address 0x0
==691==    at 0x401282: add_future_card (in /graderhome/work/c4prj2_input/tester)
==691==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==691==    by 0x400F3B: read_input (in /graderhome/work/c4prj2_input/tester)
==691==    by 0x4022A5: main (test-input.c:69)
==691==  If you believe this happened as a result of a stack
==691==  overflow in your program's main thread (unlikely but
==691==  possible), you can try to increase the size of the
==691==  main thread stack using the --main-stacksize= flag.
==691==  The main thread stack size used in this run was 8388608.
==691== 
==691== HEAP SUMMARY:
==691==     in use at exit: 832 bytes in 14 blocks
==691==   total heap usage: 22 allocs, 8 frees, 9,192 bytes allocated
==691== 
==691== LEAK SUMMARY:
==691==    definitely lost: 0 bytes in 0 blocks
==691==    indirectly lost: 0 bytes in 0 blocks
==691==      possibly lost: 0 bytes in 0 blocks
==691==    still reachable: 832 bytes in 14 blocks
==691==         suppressed: 0 bytes in 0 blocks
==691== Rerun with --leak-check=full to see details of leaked memory
==691== 
==691== For counts of detected and suppressed errors, rerun with: -v
==691== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==697== Memcheck, a memory error detector
==697== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==697== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==697== Command: ./tester i1 i2
==697== Parent PID: 696
==697== 
==697== Invalid write of size 8
==697==    at 0x401282: add_future_card (in /graderhome/work/c4prj2_input/tester)
==697==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==697==    by 0x400F3B: read_input (in /graderhome/work/c4prj2_input/tester)
==697==    by 0x4022A5: main (test-input.c:69)
==697==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==697== 
==697== 
==697== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==697==  Access not within mapped region at address 0x0
==697==    at 0x401282: add_future_card (in /graderhome/work/c4prj2_input/tester)
==697==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==697==    by 0x400F3B: read_input (in /graderhome/work/c4prj2_input/tester)
==697==    by 0x4022A5: main (test-input.c:69)
==697==  If you believe this happened as a result of a stack
==697==  overflow in your program's main thread (unlikely but
==697==  possible), you can try to increase the size of the
==697==  main thread stack using the --main-stacksize= flag.
==697==  The main thread stack size used in this run was 8388608.
==697== 
==697== HEAP SUMMARY:
==697==     in use at exit: 784 bytes in 11 blocks
==697==   total heap usage: 16 allocs, 5 frees, 9,024 bytes allocated
==697== 
==697== LEAK SUMMARY:
==697==    definitely lost: 0 bytes in 0 blocks
==697==    indirectly lost: 0 bytes in 0 blocks
==697==      possibly lost: 0 bytes in 0 blocks
==697==    still reachable: 784 bytes in 11 blocks
==697==         suppressed: 0 bytes in 0 blocks
==697== Rerun with --leak-check=full to see details of leaked memory
==697== 
==697== For counts of detected and suppressed errors, rerun with: -v
==697== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
