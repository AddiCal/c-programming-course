Grading at Sat May 11 02:51:28 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==710== Memcheck, a memory error detector
==710== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==710== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==710== Command: ./tester h.txt d.txt
==710== Parent PID: 709
==710== 
==710== Invalid write of size 8
==710==    at 0x4013ED: add_future_card (in /graderhome/work/c4prj2_input/tester)
==710==    by 0x400DB3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==710==    by 0x400F96: read_input (in /graderhome/work/c4prj2_input/tester)
==710==    by 0x40252E: main (test-input.c:69)
==710==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==710== 
==710== 
==710== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==710==  Access not within mapped region at address 0x0
==710==    at 0x4013ED: add_future_card (in /graderhome/work/c4prj2_input/tester)
==710==    by 0x400DB3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==710==    by 0x400F96: read_input (in /graderhome/work/c4prj2_input/tester)
==710==    by 0x40252E: main (test-input.c:69)
==710==  If you believe this happened as a result of a stack
==710==  overflow in your program's main thread (unlikely but
==710==  possible), you can try to increase the size of the
==710==  main thread stack using the --main-stacksize= flag.
==710==  The main thread stack size used in this run was 8388608.
==710== 
==710== HEAP SUMMARY:
==710==     in use at exit: 848 bytes in 16 blocks
==710==   total heap usage: 23 allocs, 7 frees, 5,112 bytes allocated
==710== 
==710== LEAK SUMMARY:
==710==    definitely lost: 16 bytes in 2 blocks
==710==    indirectly lost: 0 bytes in 0 blocks
==710==      possibly lost: 0 bytes in 0 blocks
==710==    still reachable: 832 bytes in 14 blocks
==710==         suppressed: 0 bytes in 0 blocks
==710== Rerun with --leak-check=full to see details of leaked memory
==710== 
==710== For counts of detected and suppressed errors, rerun with: -v
==710== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==716== Memcheck, a memory error detector
==716== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==716== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==716== Command: ./tester i1 i2
==716== Parent PID: 715
==716== 
==716== Invalid write of size 8
==716==    at 0x4013ED: add_future_card (in /graderhome/work/c4prj2_input/tester)
==716==    by 0x400DB3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==716==    by 0x400F96: read_input (in /graderhome/work/c4prj2_input/tester)
==716==    by 0x40252E: main (test-input.c:69)
==716==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==716== 
==716== 
==716== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==716==  Access not within mapped region at address 0x0
==716==    at 0x4013ED: add_future_card (in /graderhome/work/c4prj2_input/tester)
==716==    by 0x400DB3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==716==    by 0x400F96: read_input (in /graderhome/work/c4prj2_input/tester)
==716==    by 0x40252E: main (test-input.c:69)
==716==  If you believe this happened as a result of a stack
==716==  overflow in your program's main thread (unlikely but
==716==  possible), you can try to increase the size of the
==716==  main thread stack using the --main-stacksize= flag.
==716==  The main thread stack size used in this run was 8388608.
==716== 
==716== HEAP SUMMARY:
==716==     in use at exit: 800 bytes in 13 blocks
==716==   total heap usage: 17 allocs, 4 frees, 4,944 bytes allocated
==716== 
==716== LEAK SUMMARY:
==716==    definitely lost: 16 bytes in 2 blocks
==716==    indirectly lost: 0 bytes in 0 blocks
==716==      possibly lost: 0 bytes in 0 blocks
==716==    still reachable: 784 bytes in 11 blocks
==716==         suppressed: 0 bytes in 0 blocks
==716== Rerun with --leak-check=full to see details of leaked memory
==716== 
==716== For counts of detected and suppressed errors, rerun with: -v
==716== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
