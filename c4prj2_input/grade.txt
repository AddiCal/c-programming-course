Grading at Tue May  7 16:40:19 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Line_1_did_not_match
Line_2_did_not_match
Your file did not match the expected ouput
Test case failed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Line_1_did_not_match
Line_2_did_not_match
Line_3_did_not_match
Line_4_did_not_match
Line_5_did_not_match
Line_6_did_not_match
Line_7_did_not_match
Line_8_did_not_match
Your file did not match the expected ouput
Test case failed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==164== Memcheck, a memory error detector
==164== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==164== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==164== Command: ./tester h.txt d.txt
==164== Parent PID: 163
==164== 
==164== Invalid write of size 8
==164==    at 0x401282: add_future_card (in /graderhome/work/c4prj2_input/tester)
==164==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==164==    by 0x400F3B: read_input (in /graderhome/work/c4prj2_input/tester)
==164==    by 0x4022C9: main (test-input.c:69)
==164==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==164== 
==164== 
==164== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==164==  Access not within mapped region at address 0x0
==164==    at 0x401282: add_future_card (in /graderhome/work/c4prj2_input/tester)
==164==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==164==    by 0x400F3B: read_input (in /graderhome/work/c4prj2_input/tester)
==164==    by 0x4022C9: main (test-input.c:69)
==164==  If you believe this happened as a result of a stack
==164==  overflow in your program's main thread (unlikely but
==164==  possible), you can try to increase the size of the
==164==  main thread stack using the --main-stacksize= flag.
==164==  The main thread stack size used in this run was 8388608.
==164== 
==164== HEAP SUMMARY:
==164==     in use at exit: 832 bytes in 14 blocks
==164==   total heap usage: 22 allocs, 8 frees, 9,192 bytes allocated
==164== 
==164== LEAK SUMMARY:
==164==    definitely lost: 0 bytes in 0 blocks
==164==    indirectly lost: 0 bytes in 0 blocks
==164==      possibly lost: 0 bytes in 0 blocks
==164==    still reachable: 832 bytes in 14 blocks
==164==         suppressed: 0 bytes in 0 blocks
==164== Rerun with --leak-check=full to see details of leaked memory
==164== 
==164== For counts of detected and suppressed errors, rerun with: -v
==164== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==170== Memcheck, a memory error detector
==170== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==170== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==170== Command: ./tester i1 i2
==170== Parent PID: 169
==170== 
==170== Invalid write of size 8
==170==    at 0x401282: add_future_card (in /graderhome/work/c4prj2_input/tester)
==170==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==170==    by 0x400F3B: read_input (in /graderhome/work/c4prj2_input/tester)
==170==    by 0x4022C9: main (test-input.c:69)
==170==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==170== 
==170== 
==170== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==170==  Access not within mapped region at address 0x0
==170==    at 0x401282: add_future_card (in /graderhome/work/c4prj2_input/tester)
==170==    by 0x400D55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==170==    by 0x400F3B: read_input (in /graderhome/work/c4prj2_input/tester)
==170==    by 0x4022C9: main (test-input.c:69)
==170==  If you believe this happened as a result of a stack
==170==  overflow in your program's main thread (unlikely but
==170==  possible), you can try to increase the size of the
==170==  main thread stack using the --main-stacksize= flag.
==170==  The main thread stack size used in this run was 8388608.
==170== 
==170== HEAP SUMMARY:
==170==     in use at exit: 784 bytes in 11 blocks
==170==   total heap usage: 16 allocs, 5 frees, 9,024 bytes allocated
==170== 
==170== LEAK SUMMARY:
==170==    definitely lost: 0 bytes in 0 blocks
==170==    indirectly lost: 0 bytes in 0 blocks
==170==      possibly lost: 0 bytes in 0 blocks
==170==    still reachable: 784 bytes in 11 blocks
==170==         suppressed: 0 bytes in 0 blocks
==170== Rerun with --leak-check=full to see details of leaked memory
==170== 
==170== For counts of detected and suppressed errors, rerun with: -v
==170== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
