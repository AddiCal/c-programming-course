Grading at Sat May 11 03:13:26 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==1319== Memcheck, a memory error detector
==1319== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1319== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1319== Command: ./tester h.txt d.txt
==1319== Parent PID: 1318
==1319== 
==1319== Invalid read of size 8
==1319==    at 0x40141A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1319==    by 0x4024AB: main (test-input.c:81)
==1319==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1319== 
==1319== 
==1319== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1319==  Access not within mapped region at address 0x8
==1319==    at 0x40141A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1319==    by 0x4024AB: main (test-input.c:81)
==1319==  If you believe this happened as a result of a stack
==1319==  overflow in your program's main thread (unlikely but
==1319==  possible), you can try to increase the size of the
==1319==  main thread stack using the --main-stacksize= flag.
==1319==  The main thread stack size used in this run was 8388608.
==1319== 
==1319== HEAP SUMMARY:
==1319==     in use at exit: 1,536 bytes in 82 blocks
==1319==   total heap usage: 131 allocs, 49 frees, 16,128 bytes allocated
==1319== 
==1319== LEAK SUMMARY:
==1319==    definitely lost: 608 bytes in 16 blocks
==1319==    indirectly lost: 32 bytes in 4 blocks
==1319==      possibly lost: 0 bytes in 0 blocks
==1319==    still reachable: 896 bytes in 62 blocks
==1319==         suppressed: 0 bytes in 0 blocks
==1319== Rerun with --leak-check=full to see details of leaked memory
==1319== 
==1319== For counts of detected and suppressed errors, rerun with: -v
==1319== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==1325== Memcheck, a memory error detector
==1325== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1325== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1325== Command: ./tester i1 i2
==1325== Parent PID: 1324
==1325== 
==1325== Invalid read of size 8
==1325==    at 0x4011F6: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1325==    by 0x400DB3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1325==    by 0x400F96: read_input (in /graderhome/work/c4prj2_input/tester)
==1325==    by 0x4023D1: main (test-input.c:69)
==1325==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1325== 
==1325== 
==1325== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1325==  Access not within mapped region at address 0x8
==1325==    at 0x4011F6: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1325==    by 0x400DB3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1325==    by 0x400F96: read_input (in /graderhome/work/c4prj2_input/tester)
==1325==    by 0x4023D1: main (test-input.c:69)
==1325==  If you believe this happened as a result of a stack
==1325==  overflow in your program's main thread (unlikely but
==1325==  possible), you can try to increase the size of the
==1325==  main thread stack using the --main-stacksize= flag.
==1325==  The main thread stack size used in this run was 8388608.
==1325== 
==1325== HEAP SUMMARY:
==1325==     in use at exit: 1,232 bytes in 40 blocks
==1325==   total heap usage: 52 allocs, 12 frees, 5,584 bytes allocated
==1325== 
==1325== LEAK SUMMARY:
==1325==    definitely lost: 280 bytes in 16 blocks
==1325==    indirectly lost: 40 bytes in 5 blocks
==1325==      possibly lost: 0 bytes in 0 blocks
==1325==    still reachable: 912 bytes in 19 blocks
==1325==         suppressed: 0 bytes in 0 blocks
==1325== Rerun with --leak-check=full to see details of leaked memory
==1325== 
==1325== For counts of detected and suppressed errors, rerun with: -v
==1325== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
