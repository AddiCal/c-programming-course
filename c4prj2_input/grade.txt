Grading at Fri May 17 04:20:47 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==217== Memcheck, a memory error detector
==217== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==217== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==217== Command: ./tester h.txt d.txt
==217== Parent PID: 216
==217== 
==217== Invalid write of size 8
==217==    at 0x40149C: add_future_card (in /graderhome/work/c4prj2_input/tester)
==217==    by 0x400DA6: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==217==    by 0x401061: read_input (in /graderhome/work/c4prj2_input/tester)
==217==    by 0x402626: main (test-input.c:69)
==217==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==217== 
==217== 
==217== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==217==  Access not within mapped region at address 0x0
==217==    at 0x40149C: add_future_card (in /graderhome/work/c4prj2_input/tester)
==217==    by 0x400DA6: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==217==    by 0x401061: read_input (in /graderhome/work/c4prj2_input/tester)
==217==    by 0x402626: main (test-input.c:69)
==217==  If you believe this happened as a result of a stack
==217==  overflow in your program's main thread (unlikely but
==217==  possible), you can try to increase the size of the
==217==  main thread stack using the --main-stacksize= flag.
==217==  The main thread stack size used in this run was 8388608.
==217== 
==217== HEAP SUMMARY:
==217==     in use at exit: 904 bytes in 18 blocks
==217==   total heap usage: 30 allocs, 12 frees, 5,288 bytes allocated
==217== 
==217== LEAK SUMMARY:
==217==    definitely lost: 8 bytes in 1 blocks
==217==    indirectly lost: 0 bytes in 0 blocks
==217==      possibly lost: 0 bytes in 0 blocks
==217==    still reachable: 896 bytes in 17 blocks
==217==         suppressed: 0 bytes in 0 blocks
==217== Rerun with --leak-check=full to see details of leaked memory
==217== 
==217== For counts of detected and suppressed errors, rerun with: -v
==217== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==223== Memcheck, a memory error detector
==223== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==223== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==223== Command: ./tester i1 i2
==223== Parent PID: 222
==223== 
==223== Invalid write of size 8
==223==    at 0x40149C: add_future_card (in /graderhome/work/c4prj2_input/tester)
==223==    by 0x400DA6: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==223==    by 0x401061: read_input (in /graderhome/work/c4prj2_input/tester)
==223==    by 0x402626: main (test-input.c:69)
==223==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==223== 
==223== 
==223== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==223==  Access not within mapped region at address 0x0
==223==    at 0x40149C: add_future_card (in /graderhome/work/c4prj2_input/tester)
==223==    by 0x400DA6: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==223==    by 0x401061: read_input (in /graderhome/work/c4prj2_input/tester)
==223==    by 0x402626: main (test-input.c:69)
==223==  If you believe this happened as a result of a stack
==223==  overflow in your program's main thread (unlikely but
==223==  possible), you can try to increase the size of the
==223==  main thread stack using the --main-stacksize= flag.
==223==  The main thread stack size used in this run was 8388608.
==223== 
==223== HEAP SUMMARY:
==223==     in use at exit: 832 bytes in 15 blocks
==223==   total heap usage: 21 allocs, 6 frees, 5,000 bytes allocated
==223== 
==223== LEAK SUMMARY:
==223==    definitely lost: 8 bytes in 1 blocks
==223==    indirectly lost: 0 bytes in 0 blocks
==223==      possibly lost: 0 bytes in 0 blocks
==223==    still reachable: 824 bytes in 14 blocks
==223==         suppressed: 0 bytes in 0 blocks
==223== Rerun with --leak-check=full to see details of leaked memory
==223== 
==223== For counts of detected and suppressed errors, rerun with: -v
==223== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
