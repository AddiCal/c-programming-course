Grading at Sat May 11 02:48:07 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==507== Memcheck, a memory error detector
==507== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==507== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==507== Command: ./tester h.txt d.txt
==507== Parent PID: 506
==507== 
==507== Invalid write of size 8
==507==    at 0x4013D2: add_future_card (in /graderhome/work/c4prj2_input/tester)
==507==    by 0x400DB3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==507==    by 0x400F96: read_input (in /graderhome/work/c4prj2_input/tester)
==507==    by 0x402513: main (test-input.c:69)
==507==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==507== 
==507== 
==507== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==507==  Access not within mapped region at address 0x0
==507==    at 0x4013D2: add_future_card (in /graderhome/work/c4prj2_input/tester)
==507==    by 0x400DB3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==507==    by 0x400F96: read_input (in /graderhome/work/c4prj2_input/tester)
==507==    by 0x402513: main (test-input.c:69)
==507==  If you believe this happened as a result of a stack
==507==  overflow in your program's main thread (unlikely but
==507==  possible), you can try to increase the size of the
==507==  main thread stack using the --main-stacksize= flag.
==507==  The main thread stack size used in this run was 8388608.
==507== 
==507== HEAP SUMMARY:
==507==     in use at exit: 848 bytes in 16 blocks
==507==   total heap usage: 23 allocs, 7 frees, 5,112 bytes allocated
==507== 
==507== LEAK SUMMARY:
==507==    definitely lost: 16 bytes in 2 blocks
==507==    indirectly lost: 0 bytes in 0 blocks
==507==      possibly lost: 0 bytes in 0 blocks
==507==    still reachable: 832 bytes in 14 blocks
==507==         suppressed: 0 bytes in 0 blocks
==507== Rerun with --leak-check=full to see details of leaked memory
==507== 
==507== For counts of detected and suppressed errors, rerun with: -v
==507== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==513== Memcheck, a memory error detector
==513== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==513== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==513== Command: ./tester i1 i2
==513== Parent PID: 512
==513== 
==513== Invalid write of size 8
==513==    at 0x4013D2: add_future_card (in /graderhome/work/c4prj2_input/tester)
==513==    by 0x400DB3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==513==    by 0x400F96: read_input (in /graderhome/work/c4prj2_input/tester)
==513==    by 0x402513: main (test-input.c:69)
==513==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==513== 
==513== 
==513== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==513==  Access not within mapped region at address 0x0
==513==    at 0x4013D2: add_future_card (in /graderhome/work/c4prj2_input/tester)
==513==    by 0x400DB3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==513==    by 0x400F96: read_input (in /graderhome/work/c4prj2_input/tester)
==513==    by 0x402513: main (test-input.c:69)
==513==  If you believe this happened as a result of a stack
==513==  overflow in your program's main thread (unlikely but
==513==  possible), you can try to increase the size of the
==513==  main thread stack using the --main-stacksize= flag.
==513==  The main thread stack size used in this run was 8388608.
==513== 
==513== HEAP SUMMARY:
==513==     in use at exit: 800 bytes in 13 blocks
==513==   total heap usage: 17 allocs, 4 frees, 4,944 bytes allocated
==513== 
==513== LEAK SUMMARY:
==513==    definitely lost: 16 bytes in 2 blocks
==513==    indirectly lost: 0 bytes in 0 blocks
==513==      possibly lost: 0 bytes in 0 blocks
==513==    still reachable: 784 bytes in 11 blocks
==513==         suppressed: 0 bytes in 0 blocks
==513== Rerun with --leak-check=full to see details of leaked memory
==513== 
==513== For counts of detected and suppressed errors, rerun with: -v
==513== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
