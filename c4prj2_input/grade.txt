Grading at Sat May 11 03:10:46 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==921== Memcheck, a memory error detector
==921== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==921== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==921== Command: ./tester h.txt d.txt
==921== Parent PID: 920
==921== 
==921== Invalid write of size 8
==921==    at 0x40133A: add_future_card (in /graderhome/work/c4prj2_input/tester)
==921==    by 0x400DB3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==921==    by 0x400F96: read_input (in /graderhome/work/c4prj2_input/tester)
==921==    by 0x402476: main (test-input.c:69)
==921==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==921== 
==921== 
==921== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==921==  Access not within mapped region at address 0x0
==921==    at 0x40133A: add_future_card (in /graderhome/work/c4prj2_input/tester)
==921==    by 0x400DB3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==921==    by 0x400F96: read_input (in /graderhome/work/c4prj2_input/tester)
==921==    by 0x402476: main (test-input.c:69)
==921==  If you believe this happened as a result of a stack
==921==  overflow in your program's main thread (unlikely but
==921==  possible), you can try to increase the size of the
==921==  main thread stack using the --main-stacksize= flag.
==921==  The main thread stack size used in this run was 8388608.
==921== 
==921== HEAP SUMMARY:
==921==     in use at exit: 848 bytes in 16 blocks
==921==   total heap usage: 23 allocs, 7 frees, 5,112 bytes allocated
==921== 
==921== LEAK SUMMARY:
==921==    definitely lost: 16 bytes in 2 blocks
==921==    indirectly lost: 0 bytes in 0 blocks
==921==      possibly lost: 0 bytes in 0 blocks
==921==    still reachable: 832 bytes in 14 blocks
==921==         suppressed: 0 bytes in 0 blocks
==921== Rerun with --leak-check=full to see details of leaked memory
==921== 
==921== For counts of detected and suppressed errors, rerun with: -v
==921== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==927== Memcheck, a memory error detector
==927== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==927== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==927== Command: ./tester i1 i2
==927== Parent PID: 926
==927== 
==927== Invalid write of size 8
==927==    at 0x40133A: add_future_card (in /graderhome/work/c4prj2_input/tester)
==927==    by 0x400DB3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==927==    by 0x400F96: read_input (in /graderhome/work/c4prj2_input/tester)
==927==    by 0x402476: main (test-input.c:69)
==927==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==927== 
==927== 
==927== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==927==  Access not within mapped region at address 0x0
==927==    at 0x40133A: add_future_card (in /graderhome/work/c4prj2_input/tester)
==927==    by 0x400DB3: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==927==    by 0x400F96: read_input (in /graderhome/work/c4prj2_input/tester)
==927==    by 0x402476: main (test-input.c:69)
==927==  If you believe this happened as a result of a stack
==927==  overflow in your program's main thread (unlikely but
==927==  possible), you can try to increase the size of the
==927==  main thread stack using the --main-stacksize= flag.
==927==  The main thread stack size used in this run was 8388608.
==927== 
==927== HEAP SUMMARY:
==927==     in use at exit: 800 bytes in 13 blocks
==927==   total heap usage: 17 allocs, 4 frees, 4,944 bytes allocated
==927== 
==927== LEAK SUMMARY:
==927==    definitely lost: 16 bytes in 2 blocks
==927==    indirectly lost: 0 bytes in 0 blocks
==927==      possibly lost: 0 bytes in 0 blocks
==927==    still reachable: 784 bytes in 11 blocks
==927==         suppressed: 0 bytes in 0 blocks
==927== Rerun with --leak-check=full to see details of leaked memory
==927== 
==927== For counts of detected and suppressed errors, rerun with: -v
==927== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
